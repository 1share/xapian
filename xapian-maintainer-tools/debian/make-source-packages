#!/bin/sh
# Make Debian source packages from a Xapian source tree.
#
# Copyright (C) 2004 Richard Boulton
# Copyright (C) 2006,2007,2008 Olly Betts
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
# USA

# Dependencies:
# dch from package devscripts.

set -e

VALID_CODENAMES='sid lenny etch intrepid hardy gutsy dapper'

if [ x"$1" = x--help ] ; then
  echo "Usage: $0 [CODENAME...]"
  echo
  echo 'If no codenames are specified, the default is to make source packages'
  echo 'for all of them.'
  echo
  echo "Currently, the recognised values are: $VALID_CODENAMES"
  exit 0
fi

# Where to get <FIXME> from
#BRANCH=trunk
BRANCH=branches/1.0

# Debian/Ubuntu codename or codenames to build for.
# This will be overridden by the command line arguments, if any were passed.
CODENAMES=$VALID_CODENAMES

# Options to pass to dpkg-buildpackage when building source packages
BUILDPACKAGE_SRC_OPTS="-us -uc -d -S"

# Location to place the generated apt repository
PUBDIR="/srv/www/xapian.org/debian-tmp"

## Items after this point should not normally need to be modified

# Location to checkout source from.
# (URL is for Richard's setup, for Olly's drop "xapian-svn@").
SVNROOT="svn+ssh+userv://xapian-svn@svn.xapian.org/xapian/"
# Detect if we're on the machine that Xapian SVN is held on, and don't use
# network to check out sources if so.
if [ "x`hostname`" = "xatreus" ] && [ -r '/home/xapian-svn' ] ; then
  SVNROOT="svn+xapian:///xapian/"
else
  echo "This script must be run on atreus currently."
  exit 1
fi

SVNBASE=$SVNROOT/$BRANCH

# Location to download tarballs from
DOWNLOAD_BASE="http://oligarchy.co.uk/xapian/"

# Add entry to changelog if we're backporting.
adjust_changelog() {
  if [ sid != "$CODENAME" ] ; then
    base_version=`dpkg-parsechangelog|sed 's/^Version: //p;d'`
    backport_version=$base_version$BACKPORT_SUFFIX
    # --force-bad-version needed for backporting, since the "new" version may
    # be less than the "old".  Direct stdin from /dev/null to prevent dch
    # stopping to confirm the bad version is OK.
    dch --force-bad-version -v "$backport_version" -D "$CODENAME-backports" \
	"Rebuild for $CODENAMES backports." < /dev/null
  fi
}

## BEGIN PROCESSING ##
trap "echo \"make-source-packages failed\"" EXIT

# Get the codename(s) specified by the user.
if [ -n "$*" ] ; then
  CODENAMES=$*
fi

for CODENAME in $CODENAMES ; do
  # Check that the codename is known.
  VALID_CODENAMES_RE='\('`echo "$VALID_CODENAMES"|sed 's/ /\\\|/g'`'\)$'
  if expr "$CODENAME" : "$VALID_CODENAMES_RE" >/dev/null ; then
    echo "Making source packages for $CODENAME"
  else
    echo "Codename \"$CODENAME\" not known."
    echo "Known codenames are: $VALID_CODENAMES"
    exit 1
  fi

# Calculate the version which we're building.

# $VERSION holds the version number as defined in configure.in.
# $BACKPORT_SUFFIX holds a suffix to be added to the debian
# version number (empty when building for unstable).
# $SVNTAG holds the SVN tag to use to check out Xapian sources

# If we are building a backport (i.e. $CODENAME != sid), we need to make an
# entry in the debian changelog which the sh function "adjust_changelog" does
# for us.

# If we failed to parse the tag into a version number, we are not building
# a tagged release.  We will therefore have to get the version number from
# the source code.
VERSION=`svn cat "$SVNBASE"/xapian-core/configure.ac | grep AC_INIT | head -n 1 | sed 's/^.*AC_INIT( *\[\?xapian-core\]\?, *\[\?\([0-9][0-9]*\)\.\([0-9][0-9]*\)\.\([0-9][0-9]*\)[^0-9].*$/\1.\2.\3/g'`
SVNTAG=tags/$VERSION

# Calculate SVN tags to use to check out Debian control files
DEBTAG_BASE=debian-
DEBTAG_CORE=$DEBTAG_BASE`svn cat "$SVNBASE"/xapian-core/debian/changelog|dpkg-parsechangelog -l-|sed 's/^Version: //p;d'`
DEBTAG_BINDINGS=$DEBTAG_BASE`svn cat "$SVNBASE"/xapian-bindings/debian/changelog|dpkg-parsechangelog -l-|sed 's/^Version: //p;d'`
DEBTAG_OMEGA=$DEBTAG_BASE`svn cat "$SVNBASE"/xapian-applications/omega/debian/changelog|dpkg-parsechangelog -l-|sed 's/^Version: //p;d'`

# If we're building for anything other than the unstable distribution, we need
# to add a suffix to the debian version number, to avoid conflicts with the
# package in unstable.  For Ubuntu we add ".99$CODENAME" since it should sort
# before any other modification (and since dapper, Ubuntu codenames are
# allocated alphabetically).  For Debian releases, we use
# backports.org-compatible package versions - e.g. we append "~bpo40+1" for
# Debian 4.0 (etch) (and a suffix starting "~" sorts as less than no suffix).
case $CODENAME in
sid)
  BACKPORT_SUFFIX= ;;
lenny)
  BACKPORT_SUFFIX='~bpo50+1' ;;
etch)
  BACKPORT_SUFFIX='~bpo40+1' ;;
sarge)
  BACKPORT_SUFFIX='~bpo31+1' ;;
*)
  BACKPORT_SUFFIX=".99$CODENAME" ;;
esac

SRCDIR=dists/${CODENAME}/main/source
mkdir -p "$PUBDIR/$SRCDIR"

POOLDIR=pool/${VERSION}/${CODENAME}

# Calculate location that tarballs should be found at
TARBALL_CORE="${PUBDIR}/${POOLDIR}/source/xapian-core_${VERSION}.orig.tar.gz"
TARBALL_BINDINGS="${PUBDIR}/${POOLDIR}/source/xapian-bindings_${VERSION}.orig.tar.gz"
TARBALL_OMEGA="${PUBDIR}/${POOLDIR}/source/xapian-omega_${VERSION}.orig.tar.gz"

echo "$TARBALL_CORE"
# Download tarballs, if we don't already have some
if [ -e "$TARBALL_CORE" -a -e "$TARBALL_BINDINGS" -a -e "$TARBALL_OMEGA" ]
then
  # Distribution tarballs all exist
  :
else
  URL_CORE=${DOWNLOAD_BASE}${VERSION}/xapian-core-${VERSION}.tar.gz
  URL_BINDINGS=${DOWNLOAD_BASE}${VERSION}/xapian-bindings-${VERSION}.tar.gz
  URL_OMEGA=${DOWNLOAD_BASE}${VERSION}/xapian-omega-${VERSION}.tar.gz

  # Make download directory
  rm -rf downloads
  mkdir -p downloads
  cd downloads
    wget -q "$URL_CORE"
    wget -q "$URL_BINDINGS"
    wget -q "$URL_OMEGA"

    # If we've got all the packages, move them into place.
    if [ -e "xapian-core-${VERSION}.tar.gz" -a \
         -e "xapian-bindings-${VERSION}.tar.gz" -a \
         -e "xapian-omega-${VERSION}.tar.gz" ]
    then
      # Make source directory
      mkdir -p "${PUBDIR}/${POOLDIR}/source"

      mv "xapian-core-${VERSION}.tar.gz" ${TARBALL_CORE}
      mv "xapian-bindings-${VERSION}.tar.gz" ${TARBALL_BINDINGS}
      mv "xapian-omega-${VERSION}.tar.gz" ${TARBALL_OMEGA}
    fi
  cd ..
  rm -rf downloads
fi

# Check that actually worked!
if [ -e ${TARBALL_CORE} -a -e ${TARBALL_BINDINGS} -a -e ${TARBALL_OMEGA} ]
then
  # Distribution tarballs all exist
  :
else
  echo "Not all the tarballs exist"
  exit 1
fi

# Unpack distribution tarballs, and put the debian control files into place,
# and build source packages
rm -rf build
mkdir -p build
cd build
  # Build packages from xapian-core
  cp -a ${TARBALL_CORE} .
  tar zxf ${TARBALL_CORE}
  cd xapian-core-${VERSION}
    # Checkout debian control files from SVN.
    svn export -q "${SVNROOT}/tags/${DEBTAG_CORE}/xapian-core" debian
    adjust_changelog
    if [ -r debian/patch ]; then
      patch -p0 <debian/patch
    fi
    echo "$CODENAME" >debian/codename
    # Generates control from control.in
    debian/rules CODENAME="$CODENAME"
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_SRC_OPTS}
  cd ..

  # Build packages from xapian-bindings
  cp -a ${TARBALL_BINDINGS} .
  tar zxf ${TARBALL_BINDINGS}
  cd xapian-bindings-${VERSION}
    # Checkout debian control files from SVN.
    svn export -q "${SVNROOT}/tags/${DEBTAG_BINDINGS}/xapian-bindings" debian
    adjust_changelog
    if [ -r debian/patch ]; then
      patch -p0 <debian/patch
    fi
    echo "$CODENAME" >debian/codename
    # Generates control from control.in and control-{python,php}.in
    debian/rules CODENAME="$CODENAME"
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_SRC_OPTS}
  cd ..

  # Build packages from xapian-omega
  cp -a ${TARBALL_OMEGA} .
  tar zxf ${TARBALL_OMEGA}
  cd xapian-omega-${VERSION}
    # Checkout debian control files from SVN.
    svn export -q "${SVNROOT}/tags/${DEBTAG_OMEGA}/xapian-omega" debian
    adjust_changelog
    if [ -r debian/patch ]; then
      patch -p0 <debian/patch
    fi
    echo "$CODENAME" >debian/codename
    # Generates control from control.in
    debian/rules CODENAME="$CODENAME"
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_SRC_OPTS}
  cd ..

# Leave the build directory
cd ..

# Create source package repository
src_files="build/xapian*.dsc build/xapian*.diff.gz build/xapian*.changes build/xapian*.tar.gz"
rm -rf "upload-sources"
mkdir -p "upload-sources/$SRCDIR"
mkdir -p "upload-sources/${POOLDIR}/source"
mkdir -p "upload-sources/${POOLDIR}/binary"
mv $src_files upload-sources/${POOLDIR}/source

cd upload-sources
  dpkg-scansources . /dev/null | gzip -9 > $SRCDIR/Sources.gz

  apt-ftparchive \
    -oAPT::FTPArchive::Release::Origin=Xapian \
    -oAPT::FTPArchive::Release::Label=Xapian \
    -oAPT::FTPArchive::Release::Components=main \
    -oAPT::FTPArchive::Release::Codename="$CODENAME" \
    release "$SRCDIR" > Release.tmp
  mv Release.tmp "$SRCDIR"/Release
cd ..

# Check that I own all files in $PUBDIR
for file in `find "${PUBDIR}" -type f -and -not -user "$USER"`
do
  cp -p "${file}" "${file}_"
  mv "${file}_" "${file}"
done

# Upload to $PUBDIR
mkdir -p ${PUBDIR}
chgrp -R xapian upload-sources/*
chmod -R g+w upload-sources/*
(cd upload-sources && tar cf - .)|(cd ${PUBDIR} && tar xf -)
# This may fail if a different user owns one of the directories.
chgrp -R xapian ${PUBDIR}/* || true
# This may fail if a different user owns one of the directories.
chmod -R g+w ${PUBDIR}/* || true

# Source packages are now generated and uploaded.

echo "Made Debian/Ubuntu source packages for $CODENAME successfully"
done

trap - EXIT
