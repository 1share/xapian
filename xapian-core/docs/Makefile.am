## Process this file with automake to produce Makefile.in

toolsdir=$(srcdir)/../../xapian-maintainer-tools/html-tools

if MAINTAINER_MODE
# Export these so that we run the locally installed autotools when building
# from a bootstrapped SVN tree.
export ACLOCAL AUTOCONF AUTOHEADER AUTOM4TE AUTOMAKE
endif

# Note: we don't want dist tarballs built with docs missing, so for simplicity
# this Makefile.am blindly assumes the tools are in place when "make dist" is
# being run.  For "make all", "make check", etc we carefully skip any docs
# which we don't have the tools to generate.

HCONTENTDOCS = internals.hcontent intro_ir.hcontent overview.hcontent \
 quickstart.hcontent remote_protocol.hcontent \
 matcherdesign.hcontent tests.hcontent bm25.hcontent \
 queryparser.hcontent \
 quickstartexpand.cc.hcontent quickstartindex.cc.hcontent quickstartsearch.cc.hcontent
HCONTENTHTML = $(HCONTENTDOCS:.hcontent=.html)
HTMLDOCS = $(HCONTENTHTML) code_structure.html

MDDOCS = index.md install.md stemming.md remote.md bleeding.md \
 scalability.md admin_notes.md deprecation.md glossary.md \
 postingsource.md replication.md replication_protocol.md \
 sorting.md serialisation.md spelling.md synonyms.md \
 termgenerator.md valueranges.md categorisation.md
MDHTML = $(MDDOCS:.md=.html)

AUXFILES = style.css xapian-logo.png graded-background.png

# Files which should be put in the distribution by automake
EXTRA_DIST = doxygen_api.conf.in doxygen_source.conf.in \
	doxygen_api_header.html_tmpl doxygen_api_footer.html_tmpl \
	doxygen_source_header.html_tmpl doxygen_source_footer.html_tmpl \
	$(MDDOCS) $(HCONTENTDOCS) $(AUXFILES) \
	dir_contents

# Other files which should be distributed
dist-hook: doxygen_api_docs
	test -d $(distdir) || mkdir $(distdir)
	test -d $(distdir)/apidoc || mkdir $(distdir)/apidoc
	test -d $(distdir)/apidoc/html || mkdir $(distdir)/apidoc/html
	test "`echo $(srcdir)/apidoc/html/*.gif`" = "$(srcdir)/apidoc/html/*.gif" || \
	  cp -p $(srcdir)/apidoc/html/*.gif $(distdir)/apidoc/html
	test "`echo apidoc/html/*.gif`" = "apidoc/html/*.gif" || \
	  cp -p apidoc/html/*.gif $(distdir)/apidoc/html
	test "`echo $(srcdir)/apidoc/html/*.png`" = "$(srcdir)/apidoc/html/*.png" || \
	  cp -p $(srcdir)/apidoc/html/*.png $(distdir)/apidoc/html
	test "`echo apidoc/html/*.png`" = "apidoc/html/*.png" || \
	  cp -p apidoc/html/*.png $(distdir)/apidoc/html
	test "`echo $(srcdir)/apidoc/html/*.css`" = "$(srcdir)/apidoc/html/*.css" || \
	  cp -p $(srcdir)/apidoc/html/*.css $(distdir)/apidoc/html
	test "`echo apidoc/html/*.css`" = "apidoc/html/*.css" || \
	  cp -p apidoc/html/*.css $(distdir)/apidoc/html
	test "`echo $(srcdir)/apidoc/html/*.html`" = "$(srcdir)/apidoc/html/*.html" || \
	  cp -p $(srcdir)/apidoc/html/*.html $(distdir)/apidoc/html
	test "`echo apidoc/html/*.html`" = "apidoc/html/*.html" || \
	  cp -p apidoc/html/*.html $(distdir)/apidoc/html

if !MAINTAINER_NO_DOCS
# Build API docs with doxygen
all-local: doxygen_api_docs

dist_doc_DATA = $(HTMLDOCS) $(MDHTML) $(AUXFILES) apidoc.pdf

install-data-local: doxygen_api_docs
	$(mkinstalldirs) $(DESTDIR)$(docdir)/apidoc/html
	$(INSTALL_DATA) `test -f apidoc/html/index.html || echo $(srcdir)/`apidoc/html/*.gif $(DESTDIR)$(docdir)/apidoc/html
	$(INSTALL_DATA) `test -f apidoc/html/index.html || echo $(srcdir)/`apidoc/html/*.png $(DESTDIR)$(docdir)/apidoc/html
	$(INSTALL_DATA) `test -f apidoc/html/index.html || echo $(srcdir)/`apidoc/html/*.css $(DESTDIR)$(docdir)/apidoc/html
	$(INSTALL_DATA) `test -f apidoc/html/index.html || echo $(srcdir)/`apidoc/html/*.html $(DESTDIR)$(docdir)/apidoc/html

$(AUXFILES):
	cp $(toolsdir)/style.css style.css
	cp $(toolsdir)/xapian-logo.png xapian-logo.png
	cp $(toolsdir)/graded-background.png graded-background.png
endif

###############################
# How to clean up local files #
###############################

maintainer-clean-local:
	rm -rf apidoc sourcedoc

################################
# How to uninstall local files #
################################
uninstall-local:
	rm -rf $(DESTDIR)$(docdir)/apidoc

MAINTAINERCLEANFILES = doxygen_api.conf doxygen_source.conf \
	code_structure.html apidoc.pdf \
	$(MDHTML) $(HTMLDOCS) $(AUXFILES)

.PHONY: doxygen_source_docs doxygen_api_docs doxygen_docs

doxygen_source_docs: sourcedoc/html/index.html
doxygen_api_docs: apidoc/html/index.html
doxygen_docs: doxygen_source_docs doxygen_api_docs

if DOCUMENTATION_RULES
# We use $T instead of $(top_srcdir) in APIDOC_SRC, SOURCEDOC_SRC, and
# DIR_CONTENTS_FILES to keep their sizes down.
T=$(top_srcdir)

# docsource.mk is generated by preautoreconf, run by bootstrap prior to
# it running autoreconf.
include docsource.mk

code_structure.html: gen_codestructure_doc $(DIR_CONTENTS_FILES)
	./gen_codestructure_doc code_structure.html $(DIR_CONTENTS_FILES)

apidoc.pdf apidoc/html/index.html: $(APIDOC_SRC) doxygen_api.conf \
		$(srcdir)/doxygen_api_header.html_tmpl \
		$(srcdir)/doxygen_api_footer.html_tmpl
	rm -rf apidoc
	top_srcdir=$(top_srcdir) top_builddir=$(top_builddir) $(DOXYGEN) doxygen_api.conf
	cd apidoc/latex && (pool_size=750000 $(MAKE) refman.pdf||(cat refman.log;exit 1))
	mv apidoc/latex/refman.pdf apidoc.pdf
	if test "x$(PNGCRUSH)" != x ; then \
	  for png in apidoc/html/*.png ; do \
	    $(PNGCRUSH) -q $$png $${png}T && mv $${png}T $$png ; \
	  done \
	fi
	touch apidoc/html/index.html

# This dependency is required so that parallel make doesn't try to run latex
# twice simultaneously.  We touch apidoc/html/index.html after apidoc.pdf is
# created so that make doesn't attempt to regenerate it due to the dependency
# of index.html on apidoc.pdf
apidoc/html/index.html: apidoc.pdf

sourcedoc/html/index.html: $(SOURCEDOC_SRC) $(APIDOC_SRC) \
		doxygen_source.conf \
		$(srcdir)/doxygen_source_header.html_tmpl \
		$(srcdir)/doxygen_source_footer.html_tmpl
	rm -rf sourcedoc
	top_srcdir=$(top_srcdir) top_builddir=$(top_builddir) $(DOXYGEN) doxygen_source.conf

# Depends $(toolsdir)/genhtml.py $(toolsdir)/getmenu.py $(toolsdir)/menu-docs-local.html $(toolsdir)/templates/docs-html.html
.hcontent.html:
	$(PYTHON) $(toolsdir)/genhtml.py $(toolsdir)/templates/docs-html.html $< outroot= xaproot=http://xapian.org/ thisdir=$(toolsdir) docsmenu=$(toolsdir)/menu-docs-local.html localflag=-b inuri=`basename $<` PYTHON=$(PYTHON) > $@

# Depends $(toolsdir)/genpage $(toolsdir)/genhtml.py $(toolsdir)/getmenu.py $(toolsdir)/menu-docs-local.html $(toolsdir)/templates/docs-PREBODY.html $(toolsdir)/templates/docs-POSTBODY.html $(toolsdir)/templates/header-extra.html
.md.html:
	$(toolsdir)/genpage -l $< docs > $@
endif
